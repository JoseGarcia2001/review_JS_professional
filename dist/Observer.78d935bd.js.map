{"version":3,"sources":["designPatterns/Observer/Observer.ts"],"names":[],"mappings":"AAAA,IAAA,eAAA;AAAA;AAAA,YAAA;AAGE,WAAA,eAAA,CAAY,EAAZ,EAAc;AAAd,QAAA,KAAA,GAAA,IAAA;;AACE,SAAK,EAAL,GAAU,EAAV;AACA,SAAK,EAAL,CAAQ,gBAAR,CAAyB,OAAzB,EAAkC,YAAA;AAChC,MAAA,KAAI,CAAC,MAAL,CAAY,KAAI,CAAC,EAAL,CAAQ,KAApB;AACD,KAFD;AAGA,SAAK,SAAL,GAAiB,EAAjB;AACD;;AAED,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAAkB;AAChB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACD,GAFD;;AAIA,EAAA,eAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAoB;AAClB,QAAM,oBAAoB,GAAG,KAAK,SAAL,CAAe,SAAf,CAC3B,UAAC,OAAD,EAAQ;AAAK,aAAA,OAAO,KAAK,QAAZ;AAAoB,KADN,CAA7B;AAGA,SAAK,SAAL,CAAe,MAAf,CAAsB,oBAAtB,EAA4C,CAA5C;AACD,GALD;;AAOA,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAW;AACT,SAAK,SAAL,CAAe,OAAf,CAAuB,UAAC,QAAD,EAAS;AAAK,aAAA,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAA;AAAqB,KAA1D;AACD,GAFD;;AAGF,SAAA,eAAA;AAzBA,CAAA,EAAA;;AA2BA,IAAA,eAAA;AAAA;AAAA,YAAA;AAEE,WAAA,eAAA,CAAY,EAAZ,EAAc;AACZ,SAAK,EAAL,GAAU,EAAV;AACD;;AAED,EAAA,eAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAW;AACT,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACD,GAFD;;AAGF,SAAA,eAAA;AATA,CAAA,EAAA;;AAWA,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,UAAvB,CAAnB;AACA,IAAM,UAAU,GAAG,QAAQ,CAAC,aAAT,CAAuB,WAAvB,CAAnB;AACA,IAAM,WAAW,GAAG,QAAQ,CAAC,aAAT,CAAuB,YAAvB,CAApB;AAEA,IAAM,QAAQ,GAAG,IAAI,eAAJ,CAAoB,UAApB,CAAjB;AACA,IAAM,QAAQ,GAAG,IAAI,eAAJ,CAAoB,UAApB,CAAjB;AACA,IAAM,SAAS,GAAG,IAAI,eAAJ,CAAoB,WAApB,CAAlB;AAEA,QAAQ,CAAC,SAAT,CAAmB,QAAnB;AACA,QAAQ,CAAC,SAAT,CAAmB,SAAnB;AAEA,UAAU,CAAC,YAAA;AAAM,SAAA,QAAQ,CAAC,WAAT,CAAqB,SAArB,CAAA;AAA+B,CAAtC,EAAwC,IAAxC,CAAV","file":"Observer.78d935bd.js","sourceRoot":"..","sourcesContent":["class ObservedElement {\n  el: HTMLInputElement;\n  observers: any[];\n  constructor(el) {\n    this.el = el;\n    this.el.addEventListener(\"input\", () => {\n      this.notify(this.el.value);\n    });\n    this.observers = [];\n  }\n\n  subscribe(observer) {\n    this.observers.push(observer);\n  }\n\n  unsubscribe(observer) {\n    const elementToUnsubscribe = this.observers.findIndex(\n      (element) => element === observer\n    );\n    this.observers.splice(elementToUnsubscribe, 1);\n  }\n\n  notify(data) {\n    this.observers.forEach((observer) => observer.update(data));\n  }\n}\n\nclass ObserverElement {\n  el: HTMLElement;\n  constructor(el) {\n    this.el = el;\n  }\n\n  update(data) {\n    this.el.innerText = data;\n  }\n}\n\nconst elObserved = document.querySelector(\"#subject\");\nconst elObserver = document.querySelector(\"#observer\");\nconst elObserver2 = document.querySelector(\"#observer2\");\n\nconst observed = new ObservedElement(elObserved);\nconst observer = new ObserverElement(elObserver);\nconst observer2 = new ObserverElement(elObserver2);\n\nobserved.subscribe(observer);\nobserved.subscribe(observer2);\n\nsetTimeout(() => observed.unsubscribe(observer2), 5000);\n"]}