{"version":3,"sources":["media-player/MediaPlayer.ts","media-player/plugins/AutoPlay.ts","media-player/plugins/AutoPause.ts","media-player/index.ts"],"names":[],"mappings":";;;;;;AAAA,AEEA,ADAA,IDFA,AEEA,ADAA,QAAA,CCAA,EFFA;AAAA,AEEA,ADAA;ADFA,AEEA,ADAA,YDFA,AEEA,ADAA;ADCE,AEEA,ADHF,WDCE,AEEA,ADHF,QAAA,CCGE,EFFA,ACDF,CDCc,AEEZ,ADED,KDJC,EAAiB;AACf,AEEA,SFFK,AEEA,KFFL,GAAa,CEEb,GAAiB,CFFC,CAAC,CEEnB,IFFA;AACA,AEEA,ADJF,EAAA,ODEO,AEEA,CDJP,CAAA,KDEE,GAAe,CCFjB,CAAA,GDEsB,ACFtB,CDEuB,EEErB,ADJF,GCI4B,EFFX,GEEgB,CFFC,CCF9B,CDEF,ICFF,EAAsB,SCIM,CAAwB,IAAxB,CAA6B,IAA7B,CAA1B;AFDA,AGNJ,ADQI,ADJA,IEJJ,AFII,KDEK,AEEA,ADJA,CAAC,OEJV,EHMI,CGNJ,AFII,KCIA,GAAwB,KAAK,ECRjC,CAAA,OAAA,CAAA,KDQ4B,CAAsB,IAAtB,CAA2B,ICRvD,ADQ4B,CCR5B,ADQI,CCRJ;AHOG,AEEA,ADJC,IAAA,KAAK,CAAC,UAAN;AEJJ,AFKG,GAHD,CEFF,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;AHQE,AEEA,EFFA,AEEA,SAAA,CAAA,CFFA,CAAA,OEEA,CAAA,CFFA,CAAA,CEEA,GAAA,MFFA,GAAA,CEEI,EAAJ,EAAM,OFFN;AACE,AGRJ,ADUI,ADLJ,IELA,KHQS,AEEA,ADLT,KDGI,AEEA,CFFW,AGRf,EDUiB,ADLjB,CELA,CDUI,EFFA,GAAoB,KAAK,IGR7B,CHQwB,AGRxB,CHQmC,IAAX,EAApB,AGRJ,CAAA,EHQ4C,KAAK,KAAL,CAAW,KAAX,EAAxC,CGRJ,CAAA,CAAA;AHSG,AEGC,ADZJ,CAAA,EDOE,ACPF,KCYU,QAAQ,GAAG,IAAI,oBAAJ,CAAyB,KAAK,kBAA9B,EAAkD;ACVvE,ADWM,ICXA,EDWA,QCXU,CDWD,ECXiB,ADWf,KAAK,GCXkB,CAAC,aAAT,CAAuB,iBAAvB,CAAhC;AHSE,AGRF,ADSuE,ADLvE,EDIE,EGRI,CDSe,CAAjB,CDLJ,CAAA,KDIE,CAAA,AGRc,CFIhB,EEJgC,CFIjB,KDIb,CAAA,CGRsC,CAAC,AFIzC,QDIE,GAAA,EGR8B,CAAuB,SHQrD,QGR8B,CAAhC;AHSI,AGPJ,ADUI,ICVE,ADUF,KFHK,EGPI,CDUD,CAAC,CFHT,AGP8B,CHOnB,KAAX,AEGA,CAAiB,CCVqB,CHOlB,AGPmB,ADUpB,CAAC,IFHK,CEGzB,IFHoB,CAAW,EGPD,CAAuB,EHOjC,GAAmB,KAAvC,GAAiD,CGPnB,CAAlC,GHO0D,KAAL,CAAW,KAAX,GAAmB,IAApE;AACD,AGPH,ADWI,GFNF,CGLI,ADWF,QCXU,ADWF,CAAC,ECXI,IAAI,UDWjB,CAA0B,ECXT,CAAA,OAAJ,CAAgB,ODW7B,EAA8C,KAAK,gBAAnD;ACVF,ADWC,ECXD,CDEA,ICFK,EAAE,OADwB;AHSvB,AGPR,EHOQ,AGPR,OAAO,EAAE,CAAC,CHOF,CAAA,EGPM,OHON,CAAA,EGPM,CAAA,OHON,AGPE,EAAD,CHOT,CGP0B,IAAI,OHO9B,IGP8B,CAAA,OAAJ,EAAjB;AHOT,AGT+B,ADcvB,CCdO,CAAjB,ADcU,MFLR,GEKQ,CAAA,CFLR,GAAA,IAAA,CEKQ,CAAA,kBAAA,GAAR,UAA2B,OAA3B,EAAkC;ACTpC,ADUI,QAAI,ECVE,CAAC,IDUI,CAAC,CAAD,CAAP,CAAW,QCVnB,CAA4B,KDUxB,ECVJ,ADUmC,ECVE,YAAA;AHKjC,AGJF,ADUI,MCVE,GHIC,EEME,KFNP,AEME,CFNW,AEMA,ECVI,GAAqB,ADUpC,CAAiB,CFNnB,CAAqB,EEMnB,GCV4C,CAAC,IHIzB,MAAD,EAAO,CGJU,CACtC,cADsC,CAAxC;AHImC,AGDnC,ADQG,KAFD,CCNI,KDQG,EFP0B,MAAM,AGDtB,CHCuB,EGDpB,CHCa,CAAW,KAAX,CAAA,AGDL,CAAC,aAAT,CAAuB,mBAAvB,CAAtB;AHCmD,AGCnD,ADOI,KFRF,CGCI,KDOG,KCPO,ADOZ,CAAW,ECPI,GDOf,CAAiB,KAAjB,8CCPJ;AHAC,AGCD,ADOG,GFVK,GGGF,WAAW,GAAG,wDAApB;ADQC,GANO;AFFV,AGEE,MAAI,GHFN,KGEc,CAAC,KHFf,AGEM,CAAe,MAAnB,EAA2B;AHtB7B,AGuBI,ADOM,CF9BV,CE8BU,CF9BV,CGuBI,ODOM,CCPE,ADOF,CCPG,QDOH,CAAA,CCPN,eDOM,GAAR,YAAA;ACNE,ADOA,ICPA,IDOI,SCPS,ADOA,CCPC,EDOE,CCPhB,GAAoB,IDOI,CAAC,MCPzB,SDOgB,KAA6B,SAA7C;AFTJ,AGGI,ADOA,ICPA,ADOA,GFVJ,CAAA,KEUa,EFVb,CEUgB,CCPC,CHHF,AGGG,GDOG,KAAL,CAAW,EFV3B,AGGI,GAA4B,ADOhB,CAAiB,IAAjB,EAAH,GCPT,ADOsC,KAAK,KAAL,CAAW,KAAX,CAAiB,KAAjB,EAAtC;ACND,ADOA,GCXD,ADQQ,MCJD;AACL,IAAA,QAAQ,CAAC,UAAT;AACA,ADMJ,ICNI,KDMJ,QCNiB,CAAC,ADMlB,GCNI,GAAoB,UAApB;AACA,AD3BJ,CAAA,EAAA,CC2BI,aAAa,CAAC,WAAd,GAA4B,QAA5B;AACD;AACF,ADKD,CCvBA,MDuBA,CAAA,OAAA,GAAe,SAAf;ACHA,UAAU,CAAC,gBAAX,CAA4B,OAA5B,EAAqC,YAAA;AACnC,EAAA,QAAQ,CAAC,UAAT;AACD,CAFD;;AAIA,IAAI,mBAAmB,SAAvB,EAAkC;AAChC,EAAA,SAAS,CAAC,aAAV,CACG,QADH,CACY,sCADZ,EAEG,KAFH,CAES,UAAC,KAAD,EAAM;AAAK,WAAA,OAAO,CAAC,GAAR,CAAY,KAAK,CAAC,OAAlB,CAAA;AAA0B,GAF9C;AAGD","file":"media-player.ff03a25f.js","sourceRoot":"..","sourcesContent":["class MediaPlayer {\n  media: HTMLMediaElement;\n  plugins: any[];\n  constructor(props) {\n    this.media = props.media;\n    this.plugins = props.plugins || [];\n    this.runPlugins();\n  }\n\n  togglePlay() {\n    this.media.paused ? this.media.play() : this.media.pause();\n  }\n\n  toggleMute() {\n    this.media.muted ? (this.media.muted = false) : (this.media.muted = true);\n  }\n\n  private runPlugins() {\n    this.plugins.forEach((plugin) => plugin.run(this));\n  }\n}\n\nexport default MediaPlayer;\n","import MediaPlayer from \"../MediaPlayer\";\n\nclass AutoPlay {\n  run(media: MediaPlayer) {\n    media.togglePlay();\n    media.toggleMute();\n  }\n}\n\nexport default AutoPlay;\n","import MediaPlayer from \"../MediaPlayer\";\n\nclass AutoPause {\n  private threshold: number;\n  media: MediaPlayer;\n  constructor() {\n    this.threshold = 0.5;\n    this.handleIntersection = this.handleIntersection.bind(this);\n    this.handleVisibility = this.handleVisibility.bind(this);\n  }\n\n  run(md) {\n    this.media = md;\n\n    const observer = new IntersectionObserver(this.handleIntersection, {\n      threshold: this.threshold,\n    });\n    observer.observe(md.media);\n\n    document.addEventListener(\"visibilitychange\", this.handleVisibility);\n  }\n\n  private handleIntersection(entries) {\n    if (entries[0].isIntersecting) {\n      this.media.media.play();\n    } else {\n      this.media.media.pause();\n    }\n  }\n\n  private handleVisibility() {\n    let isVisible = document.visibilityState === \"visible\";\n    isVisible ? this.media.media.play() : this.media.media.pause();\n  }\n}\n\nexport default AutoPause;\n","import MediaPlayer from \"./MediaPlayer\";\nimport AutoPlay from \"./plugins/AutoPlay\";\nimport AutoPause from \"./plugins/AutoPause\";\n\nconst playButton: HTMLElement = document.querySelector(\".play-container\");\nconst muteButton: HTMLElement = document.querySelector(\".mute-container\");\n\nconst miMedia: HTMLMediaElement = document.querySelector(\".media-video\");\nconst myPlayer = new MediaPlayer({\n  media: miMedia,\n  plugins: [new AutoPlay(), new AutoPause()],\n});\n\nplayButton.addEventListener(\"click\", () => {\n  const imageToToggle: HTMLImageElement = document.querySelector(\n    \".play-button\"\n  );\n  const buttonMessage = document.querySelector(\".play-container p\");\n\n  const playSource = \"https://img.icons8.com/plasticine/100/000000/play.png\";\n  const pauseSource = \"https://img.icons8.com/plasticine/100/000000/pause.png\";\n\n  if (myPlayer.media.paused) {\n    myPlayer.togglePlay();\n    imageToToggle.src = pauseSource;\n    buttonMessage.textContent = \"Pause :/\";\n  } else {\n    myPlayer.togglePlay();\n    imageToToggle.src = playSource;\n    buttonMessage.textContent = \"Â¡Play!\";\n  }\n});\n\nmuteButton.addEventListener(\"click\", () => {\n  myPlayer.toggleMute();\n});\n\nif (\"serviceWorker\" in navigator) {\n  navigator.serviceWorker\n    .register(\"./sw.js\")\n    .catch((error) => console.log(error.message));\n}\n"]}